using System;
using System.Windows.Media.Animation;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Game15        
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Массив, который определяет положение в доске
        int[,] массивОбъектовДоски;

        // Инициализация
        public MainWindow()
        {
            InitializeComponent();
            // Заполняем доску
            ЗаполнитьДоскуПервоначальнымиЗначениями();
        }

        // После того, как заполнили доску(массив) - нарисуем её
        private void ОткрытиеГлавногоОкна(object sender, RoutedEventArgs e)
        {
            НарисоватьДоску();
        }

        private void ЗаполнитьДоскуПервоначальнымиЗначениями()
        {
            массивОбъектовДоски = new int[4, 4];
            int счетчик = 1;

            Random r = new Random();
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    // Заполняем случайными числами от 1 до 100
                    массивОбъектовДоски[i, j] = r.Next(1, 100);
                    счетчик++;
                    if (счетчик > 16) массивОбъектовДоски[i, j] = 0;
                }
            }
        }
        
        // Функция рисования доски
        private void НарисоватьДоску()
        {
            // Сначала очищаем доску
            ДоскаИгры.Children.Clear();

            // Пробегаемся по массиву для создания элементов
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    if (массивОбъектовДоски[i, j] > 0)
                    {
                        // Создадим элемент,если его значение больше 0(если 0- это пустой элемент)
                        ЭлементДоски элемент = new ЭлементДоски
                        {
                            ЗначениеОбъекта = массивОбъектовДоски[i, j],
                            Width = ДоскаИгры.Width / 4,
                            Height = ДоскаИгры.Height / 4,
                            позиция_I = i,
                            позиция_J = j
                        };
                        // Располагаем на канве новый элемент 
                        Canvas.SetTop(элемент, i * ДоскаИгры.Width / 4);
                        Canvas.SetLeft(элемент, j * ДоскаИгры.Width / 4);
                        ДоскаИгры.Children.Add(элемент);

                        // Добавляем к элементу функцию,которая будет срабатывать при нажатии кнопкой
                        элемент.MouseLeftButtonUp += new MouseButtonEventHandler(НажатиеЛевойКнопкиМыши);
                    }
                }
            }
        }

        // Добавляем к элементу функцию,которая будет срабатывать при нажатии кнопкой
        void НажатиеЛевойКнопкиМыши(object sender, MouseButtonEventArgs e)
        {
            ЭлементДоски it = (ЭлементДоски)sender;
            // Если можно сдвинуть на  позицию(если рядом есть нулевой черный элемент) - то сдвигаем. Иначе - нет.
            // Всего 4 варианта: сверху, снизу,слева и справа
            if (ПроверитьДействие(it.позиция_I - 1, it.позиция_J))
            {
                СдвинутьНажатыйЭлемент(it, it.позиция_I - 1, it.позиция_J);
            }
            else if (ПроверитьДействие(it.позиция_I, it.позиция_J + 1))
            {
                СдвинутьНажатыйЭлемент(it, it.позиция_I, it.позиция_J + 1);
            }
            else if (ПроверитьДействие(it.позиция_I + 1, it.позиция_J))
            {
                СдвинутьНажатыйЭлемент(it, it.позиция_I + 1, it.позиция_J);
            }
            else if (ПроверитьДействие(it.позиция_I, it.позиция_J - 1))
            {
                СдвинутьНажатыйЭлемент(it, it.позиция_I, it.позиция_J - 1);
            }
        }

        // Функция сдвига нажатого элемента
        private void СдвинутьНажатыйЭлемент(ЭлементДоски элемент, int i, int j)
        {
            // Поменяем значение черного элемента на выбранный
            массивОбъектовДоски[i, j] = массивОбъектовДоски[элемент.позиция_I, элемент.позиция_J];
            // И создадим новый темный элемент
            массивОбъектовДоски[элемент.позиция_I, элемент.позиция_J] = 0;

            // После переопределения массива - заново перерисуем доску
            НарисоватьДоску();
        }
        
        // Проверим - не выйдем ли мы за край доски и находится ли рядом(на проверяемой позиции сверху,снизу, слева или справа черная клетка(нулевая))
        private bool ПроверитьДействие(int i, int j)
        {
            if (i < 0 || j < 0 || i > 3 || j > 3) return false;
            return (массивОбъектовДоски[i, j] == 0);
        }


    }
}
