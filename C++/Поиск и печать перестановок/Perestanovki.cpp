#include<iostream>//Напечатать все перестановки до заданного числа(1...N). 
//Использовался метод рекурсии(подстановки) с последующей сортировкой и выводом всех перестановок на неповторяемость элементов. Все конечные результаты - 
//в лексикографическом порядке
#include<conio.h>

using namespace std;
int n, poz,schet,x[10000];//Задаётся массив, в котором хранятся переменные значения перестановок

void Perestanovki(int k)//Процедура рекурсии. Начальное значение к=0, для того, чтобы рекурсии дошла до конца и
	//вывела все результаты в лексикографическом порядке.
{
    if(k==n)
    {
		schet=0; //Переменнная, которая подсчитывает количество НЕповторений всех элементов в ряду перестановки.
		poz=0;//Переменная, для сравнения с вышеназванной schet. 

		for(int t=1; t<n; t++ )//Подсчитывает все числа от 1 до N - количество именно сравнений на повторяемость элементов. В принципе, можно было вывести цикл
			//вне процедуры ради экономии времени подсчета, работы рекурсии. Но пришлось бы вводить новые переменные для передачи в процедуру.
			poz=poz+t;
		
		for(int w=0;w<n;w++)//Элементарный цикл подсчета НЕповторяемости элементов в перестановке(массиве)
			for(int y=w+1;y<n;y++)
			{
				if (x[w]!=x[y]) schet++;
			} 
        {
		if (schet==poz)//В зависимости от равенства переменных происходит печать подстановки. 
			//В результате печатаются подстановки, в которых отсутствует повторяемость элементов.
			{
				for(int i=0;i<n;i++)
					cout<<x[i]<<" ";
				cout<<"\n";
			}
		}
    }
    else
    {
        for(int r=0;r<n;r++)//Основной код процедуры. Разветвляет рекурсию на "поиск" новых комбинаций переменных в массиве. В результате получается
			//получается n! (факториал) их значений.
        {
            x[k]=r+1;
            Perestanovki(k+1);
        }
    }
 
}
int main()
{
    cout<<"Vvedite chislo N=";//Ввод заданного числа N.
		cin>>n;
	cout<<endl<<"Rezultat:"<<endl;//Вывод результатов в результате работы вызванной процедуры-рекурсии.

    Perestanovki(0);//Обращение к искомой процедуре-функции.

	getch ();
	return 0;
}